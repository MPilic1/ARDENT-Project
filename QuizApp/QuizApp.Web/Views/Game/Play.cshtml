@model QuizApp.Core.Models.GameSession
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Play Quiz";
    Layout = "_Layout";
    var apiUrl = Configuration["ApiSettings:BaseUrl"];
}

<div class="container-fluid game-container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Waiting Screen -->
            <div id="waitingScreen" class="text-center fade-in" style="display: @(Model.Status == QuizApp.Core.Models.GameStatus.WaitingToStart ? "block" : "none")">
                <div class="card">
                    <div class="card-body">
                        <i class="fas fa-spinner fa-spin fa-4x mb-4" style="color: var(--primary-color);"></i>
                        <h2 class="card-title mb-4">Waiting for Game to Start</h2>
                        <p class="lead">Game Code: <span class="badge bg-primary">@Model.Code</span></p>
                        <div class="mt-4">
                            <div class="spinner-grow text-primary" role="status"></div>
                            <div class="spinner-grow text-success" role="status" style="animation-delay: 0.2s"></div>
                            <div class="spinner-grow text-info" role="status" style="animation-delay: 0.4s"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Question Screen -->
            <div id="questionScreen" class="fade-in" style="display: @(Model.Status == QuizApp.Core.Models.GameStatus.InProgress ? "block" : "none")">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h3 class="question-number mb-0">Question <span id="currentQuestionNumber">1</span></h3>
                            <div class="timer" id="timer">30</div>
                        </div>
                        
                        <div id="answerOptions" class="row g-3">
                            <!-- Answer options will be added dynamically -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Answer Result Screen -->
            <div id="resultScreen" class="text-center fade-in" style="display: none;">
                <div class="card">
                    <div class="card-body">
                        <div id="resultIcon" class="mb-4"></div>
                        <h2 id="resultText" class="card-title mb-4"></h2>
                        <p id="pointsEarned" class="lead"></p>
                        <div id="correctAnswer" class="alert alert-success mt-4" style="display: none;"></div>
                        <div class="mt-4">
                            <p class="text-muted">Next question in:</p>
                            <div class="timer" id="resultTimer">30</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Final Score Screen -->
            <div id="finalScreen" class="text-center fade-in" style="display: @(Model.Status == QuizApp.Core.Models.GameStatus.Completed ? "block" : "none")">
                <div class="card">
                    <div class="card-body">
                        <i class="fas fa-trophy fa-4x mb-4" style="color: var(--warning-color);"></i>
                        <h2 class="card-title mb-4">Game Complete!</h2>
                        <div class="final-score mb-4">
                            <h3>Your Final Score</h3>
                            <div class="display-4" id="finalScore">0</div>
                        </div>
                        <div id="leaderboard" class="mt-4">
                            <!-- Leaderboard will be loaded here -->
                        </div>
                        <a href="@Url.Action("Index", "Home")" class="btn btn-primary btn-lg mt-4">
                            <i class="fas fa-home me-2"></i>Back to Home
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const apiUrl = '@apiUrl';
        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`${apiUrl}gamehub`)
            .withAutomaticReconnect()
            .build();

        let currentQuestion = null;
        let timer = null;
        let answeredCurrentQuestion = false;
        let totalQuestions = 0;
        let currentQuestionNumber = 0;
        let currentQuestionPoints = 0;

        async function startConnection() {
            try {
                await connection.start();
                console.log("Connected to game hub");
                await joinGame();

                // Set up event handlers
                connection.on("QuestionReceived", (question) => {
                    console.log("Received question:", question);
                    currentQuestionNumber = question.questionNumber;
                    totalQuestions = question.totalQuestions;
                    currentQuestionPoints = question.points || 0;
                    displayQuestion(question);
                });

                connection.on("AnswerSubmitted", (result) => {
                    console.log("Answer submitted result:", result);
                    showResult(result);
                });

                connection.on("GameStarted", () => {
                    console.log("Game started");
                    showScreen("questionScreen");
                });

                connection.on("GameEnded", (finalScores) => {
                    console.log("Game ended, final scores:", finalScores);
                    updateLeaderboard(finalScores);
                    showScreen("finalScreen");
                });

                connection.on("GameError", (error) => {
                    console.error("Game error:", error);
                    alert("Game error: " + error);
                });

            } catch (err) {
                console.error(err);
                setTimeout(startConnection, 5000);
            }
        }

        async function joinGame() {
            const gameCode = "@Model.Code";
            const playerId = "@ViewBag.PlayerId";
            await connection.invoke("JoinGame", gameCode, playerId);
        }

        function showScreen(screenId) {
            ["waitingScreen", "questionScreen", "resultScreen", "finalScreen"].forEach(id => {
                document.getElementById(id).style.display = "none";
            });
            document.getElementById(screenId).style.display = "block";
        }

        function startTimer(duration) {
            let timeLeft = duration;
            const timerElement = document.getElementById("timer");
            const resultTimerElement = document.getElementById("resultTimer");
            
            if (timer) clearInterval(timer);
            
            timer = setInterval(() => {
                timerElement.textContent = timeLeft;
                if (resultTimerElement) {
                    resultTimerElement.textContent = timeLeft;
                }
                
                if (timeLeft <= 5) {
                    timerElement.style.color = "var(--danger-color)";
                    timerElement.classList.add("pulse");
                    if (resultTimerElement) {
                        resultTimerElement.style.color = "var(--danger-color)";
                        resultTimerElement.classList.add("pulse");
                    }
                }
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    // Check if this was the last question
                    if (currentQuestionNumber >= totalQuestions) {
                        // End the game
                        const gameCode = "@Model.Code";
                        connection.invoke("EndGame", gameCode)
                            .catch(error => console.error("Error ending game:", error));
                    } else {
                        // Request next question
                        const gameCode = "@Model.Code";
                        connection.invoke("NextQuestion", gameCode, currentQuestionNumber)
                            .catch(error => console.error("Error requesting next question:", error));
                    }
                }
                
                timeLeft--;
            }, 1000);
        }

        function displayQuestion(question) {
            console.log("Displaying question:", question);
            currentQuestion = question;
            answeredCurrentQuestion = false;
            
            // Set question number
            const questionNumberElement = document.getElementById("currentQuestionNumber");
            if (questionNumberElement) {
                questionNumberElement.textContent = question.questionNumber || "?";
            }
            
            // Build answer options
            const optionsContainer = document.getElementById("answerOptions");
            if (optionsContainer) {
                optionsContainer.innerHTML = "";
                
                if (question.answers && Array.isArray(question.answers)) {
                    question.answers.forEach((answer, index) => {
                        const col = document.createElement("div");
                        col.className = "col-md-6 mb-3";
                        
                        const button = document.createElement("button");
                        button.className = "quiz-option w-100 btn btn-outline-light p-3";
                        button.onclick = () => submitAnswer(index);
                        
                        const icon = document.createElement("i");
                        icon.className = "fas fa-square me-2";
                        
                        const text = document.createElement("span");
                        text.textContent = answer || `Option ${index + 1}`;
                        
                        button.appendChild(icon);
                        button.appendChild(text);
                        col.appendChild(button);
                        optionsContainer.appendChild(col);
                    });
                } else {
                    console.error("No answers found in question:", question);
                    optionsContainer.innerHTML = "<p class='text-warning'>No answer options available</p>";
                }
            }
            
            showScreen("questionScreen");
            startTimer(question.timeLimit || 30);
        }

        async function submitAnswer(answerIndex) {
            if (answeredCurrentQuestion) return;
            answeredCurrentQuestion = true;
            
            const buttons = document.querySelectorAll(".quiz-option");
            buttons.forEach(btn => btn.disabled = true);
            
            if (answerIndex >= 0) {
                buttons[answerIndex].classList.add("selected");
            }
            
            const gameCode = "@Model.Code";
            const playerId = "@ViewBag.PlayerId";
            try {
                const result = await connection.invoke("SubmitAnswer", gameCode, currentQuestion.questionId, answerIndex, parseInt(playerId));
                if (result) {
                    showResult(result);
                } else {
                    console.error("No result received from server");
                    // Don't show error for timer expiration
                    if (answerIndex !== -1) {
                        alert("Failed to submit answer: No response from server");
                    }
                }
            } catch (error) {
                console.error("Error submitting answer:", error);
                // Don't show error for timer expiration
                if (answerIndex !== -1) {
                    alert("Failed to submit answer: " + error);
                }
            }
            // Note: We don't clear the timer here anymore, letting it continue running
        }

        function showResult(result) {
            const resultScreen = document.getElementById("resultScreen");
            const resultIcon = document.getElementById("resultIcon");
            const resultText = document.getElementById("resultText");
            const pointsEarned = document.getElementById("pointsEarned");
            const correctAnswer = document.getElementById("correctAnswer");
            const resultTimer = document.getElementById("resultTimer");
            
            if (result.isCorrect) {
                resultIcon.innerHTML = '<i class="fas fa-check-circle fa-4x" style="color: var(--success-color);"></i>';
                resultText.textContent = "Correct!";
            } else {
                resultIcon.innerHTML = '<i class="fas fa-times-circle fa-4x" style="color: var(--danger-color);"></i>';
                resultText.textContent = "Incorrect";
            }
            
            pointsEarned.textContent = `You earned ${result.score} points`;
            
            if (!result.isCorrect && currentQuestion.answers) {
                const correctAnswerIndex = result.correctAnswerIndex;
                if (correctAnswerIndex >= 0) {
                    correctAnswer.textContent = `Correct answer: ${currentQuestion.answers[correctAnswerIndex]}`;
                    correctAnswer.style.display = "block";
                }
            } else {
                correctAnswer.style.display = "none";
            }
            
            // Update the result timer to match the current timer
            if (resultTimer) {
                resultTimer.textContent = document.getElementById("timer").textContent;
            }
            
            showScreen("resultScreen");
        }

        function updateLeaderboard(scores) {
            const leaderboard = document.getElementById("leaderboard");
            const finalScore = document.getElementById("finalScore");
            const playerId = parseInt("@ViewBag.PlayerId");
            
            if (leaderboard) {
                // Find the current player's score
                const playerScore = scores.find(s => s.playerId === playerId);
                if (playerScore) {
                    finalScore.textContent = playerScore.totalScore;
                }

                leaderboard.innerHTML = `
                    <h3 class="mb-3">Final Standings</h3>
                    <div class="list-group">
                        ${scores.map((score, index) => `
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="badge bg-primary me-2">#${index + 1}</span>
                                    ${score.playerName}
                                </div>
                                <div>
                                    <span class="badge bg-success me-2">${score.totalScore} points</span>
                                    <span class="badge bg-info">${score.correctAnswers} correct</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
        }

        // Start the connection when the page loads
        startConnection();
    </script>
} 